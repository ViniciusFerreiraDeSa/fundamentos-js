const notas = [10, 6, 8, 5.5, 10];

// M√©todo POP Remove um atributo do Array, ele remove a ultima nota do Array caso voc√™ n√£o passe nenhum par√¢metro

notas.pop();

const media = (notas[0] + notas[1] + notas[2] + notas[3]) / notas.length 

console.log(`Parab√©ns voc√™ terminou o bimestre com a nota: ${media}`);

// Exemplo com ARRAY DE PUSH E POP

jantarDeHoje = ['üçî', 'üå≠', 'üçï']

jantarDeHoje.pop()
jantarDeHoje.pop()

jantarDeHoje.push('üç≥')
jantarDeHoje.push('ü•ó')
jantarDeHoje.push('üçè')

console.log(jantarDeHoje)


// Tem muitos m√©todos Arrays e voc√™s podem saber mais deles atrav√©s da documenta√ß√£o do mozzila, mas deixarei aqui alguns m√©todos mais usados.

/*
concat()
Junta dois arrays, colocando o array passado como argumento, logo depois do primeiro. Em portugu√™s essa opera√ß√£o √© conhecida como concatena√ß√£o.
N√£o altera o array no qual foi chamado, ent√£o precisamos salvar esse resultado em um novo array.


filter()
Retorna uma lista contando todos os elementos que passaram em um teste, ou seja, uma fun√ß√£o escrita por n√≥s.
N√£o altera o array onde foi chamado, ent√£o precisamos salvar esse resultado em um novo array.


find()
Funciona de forma parecida com o filter, por√©m retorna apenas o primeiro valor que satisfizer o teste, podendo ser uma string ou um n√∫mero.


findIndex()
Funciona igual o find(), mas retorna o √≠ndice em vez do elemento, possibilitando us√°-lo em outras partes do c√≥digo.


lastIndexOf()
√â igual o findIndex() por√©m come√ßa do √∫ltimo elemento, n√£o no primeiro.


forEach()
Executa uma fun√ß√£o em cada elemento do array de forma individual.
N√£o altera o array original e nem retorna um valor, deixando esse trabalho a cargo da fun√ß√£o escolhida.


pop()
Retira o √∫ltimo elemento do array.
Altera o array original removendo o elemento.


shift()
Retira o primeiro elemento do array.
Altera o array original removendo o elemento e trocando o √≠ndice de todos os elementos para um a menos do que eram, o √≠ndice 1 passa a ser o 0, o 2 passa a ser o 1, e assim por diante.


push()
Adiciona o elemento passado como par√¢metro do array, por√©m na √∫ltima posi√ß√£o.
Altera o array original com o novo valor.


unshift()
Funciona igual ao push(), por√©m adiciona na primeira posi√ß√£o e acaba trocando o √≠ndice de todos os elementos.
Altera o array original com o novo valor.


reduce()
Utiliza uma fun√ß√£o definida pelo usu√°rio em cada um dos elementos, guardando o resultado em uma vari√°vel que pode ser acessada dentro da fun√ß√£o que foi definida, retornando um √∫nico valor no final, reduzindo o array para um √∫nico valor.


reduceRight()
Funciona igual o reduce() por√©m come√ßa do final do array e segue at√© o in√≠cio.


reverse()
Inverte a ordem dos elementos do array, ent√£o o primeiro vira o √∫ltimo, o segundo o pen√∫ltimo e assim por diante.


slice()
Copia uma parte do array para outro array.


sort()
Organiza o array de acordo com a classifica√ß√£o Unicode, onde os n√∫meros v√™m antes das letras, por√©m n√£o funciona corretamente para n√∫meros, onde temos que definir uma fun√ß√£o que ir√° auxiliar o comando.


splice()
Consegue remover, um ou mais elementos consecutivos caso o segundo par√¢metro tenha um valor maior que 0, e incluir um ou mais elementos a partir de um √≠ndice escolhido.







*/

